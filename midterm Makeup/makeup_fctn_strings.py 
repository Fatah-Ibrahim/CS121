
# def cube_sum(num):
#     count = 0
#     for n in range(1, num + 1):
#         count += n ** 3
#     return count
# print(cube_sum(3))


# ouput even

# def output_even(smaller_num, larger_num):

#     for n in range(smaller_num, (larger_num + 1)):
#         if n % 2 == 0:
#             print(n)
        
# print(output_even(37,1050))

# Pyramid

# def pyramid_volume(b, h):
    
#     import math
#     volume = ((b**2)*h) / 3
#     return volume

# print(pyramid_volume(1,2))

#Total Score 

# def Total_score(two_pointers, three_pointer):
#     total = two_pointers*2 + three_pointer*3
#     return total

# print(Total_score(5,7))

# Total Score

# def total_score(aces,winning_shot):

#     total = aces * 2 + winning_shot *  1
#     return total

# print(total_score(5,3))

#legs 
# def leg_counter(chickens, cows, pigs):
    
#     total_legs = chickens * 2 + cows * 4 + pigs *4 
#     return total_legs

# print(leg_counter(4,3,2))

#resting_rate

# def resting_rate(age, athl_goal):

#     if age >= 20 and age <= 39:
#         if athl_goal == 'above average':
#             return '47-72'
#         elif athl_goal == 'below average':
#             return '73-93'
#     if age >= 40 and age <= 59:
#         if athl_goal == 'above average':
#             return '46-71'
#         elif athl_goal == 'below average':
#             return '72-94'
#     if age >= 50 and age <= 79:
#         if athl_goal == 'above average':
#             return '45-70'
#         elif athl_goal == 'below average':
#             return '71-94'
        
# print(resting_rate(79, 'above average'))


# pool time

# def pool_time(grade, time):

#     if grade =='k':
#         grade = 0

#     if grade <= 3:
#         if time == 'morning':
#             return '9 AM'
#         elif time == 'afternoon':
#             return '1 PM'
#     if grade >= 4 and grade == 8:
#         if time == 'morning':
#             return '10 AM'
#         elif time == 'afternoon':
#             return '2 PM'
#     if grade >= 9 and grade == 12:
#         if time == 'morning':
#             return '11 AM'
#         elif time == 'afternoon':
#             return '3 PM'
    
# print(pool_time('k', 'morning'))
        

# cnverting knuts

# def converting_kunts(kunts):
    
#     output = ''

#     galleon = kunts // 493
#     remaining_kunt = kunts - (galleon * 493)
#     sickles = kunts // 29
#     remaining_kunt = kunts - (sickles * 29)

#     if galleon > 0:
#         output += f"Galleon: {galleon}"
#     if sickles > 0:
#         output = output + f'sickles: {sickles}' 
#     if kunts > 0:
#          output = output + f'kunts: {remaining_kunt}'
#     return output

# print(converting_kunts(32))
    
#  bronze 

# def convert_bronze(bronze_coins):
#     output = ''
#     gold_coins = bronze_coins // 300
#     remaining_coins = bronze_coins - (gold_coins * 300)

#     silver_coins = remaining_coins // 20
#     remaining_coins = remaining_coins - (silver_coins * 20)

#     if gold_coins > 0:
#         output = output + f'gold: {gold_coins}'
#     if silver_coins > 0:
#         output = output + f'siliver: {silver_coins}'
#     if bronze_coins > 0:
#         output = output + f'bronze: {remaining_coins}'
#     return output

# print(convert_bronze(903))

# coin toss

# from random import randint

# def coin_toss(guess):

#     value = randint(0,1)
    
#     if guess == value:
#         return 'Correct!'
#     else:
#         return 'Incorrect!'

# print(coin_toss(1))

# count dupes

# def count_duplicates(num1, num2, num3):

#     if num1 == num2 == num3:
#         return 'you enter the same number 3 times'
#     elif num1 == num2 or num1 == num3 or num2 == num3:
#         return 'You entered the same number 2 times'
#     else:
#         return 'Each number is unique'

# print(count_duplicates(1,3,2))

# highway 

# def highway_directions(highway_num):
    
#     # odd north/south
#     #even east/west
#     # prim 1-99
#     # aux 100-999
     
#     if highway_num <= 1 and highway_num <=  99:
#         if highway_num % 2 == 0:
#             return f'I-{highway_num} runs east/west'
#         else: 
#             return f'I-{highway_num} runs north/south'

        
#     primary = highway_num % 100
#     if primary == 0 or primary > 99:
#         return f'I-{highway_num} is an invaild highway number'
    
#     if primary % 2 == 0:
#         return f'I-{highway_num} runs east/west'
#     else:
#         return f'I-{highway_num} runs north/south'

# print(highway_directions(400))

# check constant or vowel

# def check_letter(letter):

#     if letter in 'aeiou':
#         return 'Vowel'
#     else:
#         return 'Constant'

# print(check_letter('o'))

# find factors

# def find_factors(num):
#     factors = []
#     for n in range(1, num + 1):
#         if num % n == 0:
#             factors.append(n)
#     return factors
            

# print(find_factors(12))

# hail seq

# def hailstone_seq(n):
#     results = ''
#     while n != 1:
#         results += str(n) + ', '
#         if n % 2 == 0:
#             n = n //2
#         else:
#             n = (3 * n)+ 1
#     results += str(n)
#     return results

# print(hailstone_seq(40))

# rug 

# def design_rug(width, length, pattern = '@)'):
               

#     for x in range(width):
#         print(pattern*length)

# design_rug(3,5,'$')

# skip letter

# def skip_letter(word):

#     remaining_letters = ''
#     for letter in range(0,len(word),2):
#         remaining_letters += word[letter]
#     return remaining_letters

# print(skip_letter('counterattack'))

# sum until -num

# def sum_loop():
#     sum = 0 
#     while True:
#         user_input = int(input('Enter an integer: '))
#         if user_input < 0:
#             break
#         sum += user_input
#     return sum 
# print(sum_loop())

###STRINGS STRINGS 

# reverse string

# def reverse_string(word):
#     reversed_word = word[::-1]
#     print(reversed_word)

# reverse_string('hello')

#fever

# def is_fever(temp):

#     value, unit = float(temp[:-1]), temp[-1]
#     if unit == 'F':
#         if value > 98.6:
#             return True
#         else:
#             return False
#     if unit == 'C':
#         if value > 37:
#             return True
#         else:
#             return False
# print(is_fever('98.5F'))
    
#hamming distance 

# def hamming_distance(str1, str2):
#     count = 0 
#     for i in range(len(str1)):
#         if str1[i] != str2[i]:
#             count += 1
        
#     if count == 1:
#         return f'{count}, since there is only {count} letter that is different'
#     if count == 0:
#         return f'{count}, since all {len(str1)} letter are same'
#     else:
#         return f'{count}, since {count} letters are different'
     

# print(hamming_distance('zzwzwq','zzzzzz'))

# def output_even(smaller_num, larger_num):
#     for num in range(smaller_num, larger_num + 1):
#         if num % 2 == 0:
#             print(num)

# print(output_even(37,1050))
        


#dshbc

# def total_calorie(fruit):
#     total_cal = 0
#     calories = {'apple': 95, 'banana': 105, 'orange': 62, 'grape': 3, 'pear': 103}

#     for f in fruit:
#         total_cal += calories[f]
#     return total_cal
# print(total_calorie(['apple', 'banana', 'orange']))

#high earners

# def high_earners(employee_salaries, amount):

#     result = []

#     for employee, salary in employee_salaries.items():
#         if salary > amount:
#             result.append(employee)
#     return result

# print(high_earners({'alice': 50000, 'bob': 75000, 'cj': 1000000},60000))

#dksjbsk

# menu = {'burger': 10, 'fries': 4, 'soda': 3}

# def restruant_menu(menu):
#     output = ''

#     for food, price in menu.items():
#         output += f'{food} costs {price}\n'
#     return output
    
# print(restruant_menu(menu))


#dhshjhd

# def total_sales(sales):

#     total = 0
#     for item in sales:
#         total += sales[item]
#     return total

# print(total_sales({'llsas': 5, 'jsdhfjsd': 10, 'dadvd':3}))



    



